#!/bin/bash

# Set to a local clone of the https://github.com/interwork-alliance/TokenTaxonomyFramework repo:
TTF_REPO_ROOT=~/TokenTaxonomyFramework

# All relative paths are specified relative to script directory:
cd "$(dirname "$0")"

# Install a protoc plugin that can compile .proto files to .jsonschema files:
go get github.com/chrusty/protoc-gen-jsonschema/cmd/protoc-gen-jsonschema
go install github.com/chrusty/protoc-gen-jsonschema/cmd/protoc-gen-jsonschema
cp ~/go/bin/protoc-gen-jsonschema .

# Generate .jsonschema files for all types:
NPM_BIN=`npm bin`
mkdir -p jsonschema
$NPM_BIN/grpc_tools_node_protoc \
    --jsonschema_out=./jsonschema \
    --plugin=protoc-gen-jsonschema=protoc-gen-jsonschema \
    --proto_path=$TTF_REPO_ROOT/model/protos \
    $TTF_REPO_ROOT/model/protos/*.proto

# The internal references in .jsonschema files generated by protoc-gen-jsonschema are
# not formed correctly, fix this:
sed -i '' 's/    "\$ref": "/    "\$ref": "#definitions\//' jsonschema/*.jsonschema

# Generate TypeScript code corresponding to the schemas that we are interested in:
$NPM_BIN/quicktype -o Behavior.ts -s schema jsonschema/Behavior.jsonschema
$NPM_BIN/quicktype -o BehaviorGroup.ts -s schema jsonschema/BehaviorGroup.jsonschema
$NPM_BIN/quicktype -o PropertySet.ts -s schema jsonschema/PropertySet.jsonschema
$NPM_BIN/quicktype -o TemplateFormula.ts -s schema jsonschema/TemplateFormula.jsonschema
$NPM_BIN/quicktype -o TemplateDefinition.ts -s schema jsonschema/TemplateDefinition.jsonschema
$NPM_BIN/quicktype -o TokenBase.ts -s schema jsonschema/TokenBase.jsonschema
